<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Android</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://abelsdf.github.io/"/>
  <updated>2017-07-23T17:05:39.738Z</updated>
  <id>https://abelsdf.github.io/</id>
  
  <author>
    <name>单黛丰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rxjava学习笔记之变换操作符</title>
    <link href="https://abelsdf.github.io/2017/07/23/Rxjava%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%8F%98%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://abelsdf.github.io/2017/07/23/Rxjava学习笔记之变换操作符/</id>
    <published>2017-07-23T15:45:31.902Z</published>
    <updated>2017-07-23T17:05:39.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变换操作"><a href="#变换操作" class="headerlink" title="变换操作"></a>变换操作</h1><blockquote>
<p>Map, flatMap, scan, groupBy, buffer, window, cast</p>
</blockquote>
<ul>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Map.html" target="_blank" rel="external"><strong><code>Map( )</code></strong></a> — 对序列的每一项都应用一个函数来变换Observable发射的数据序列</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"Hello"</span>)</div><div class="line">  .map(s -&gt; s + <span class="string">" RxJava"</span>)</div><div class="line">  .subscribe(System.out::println);</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello RxJava</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/FlatMap.html" target="_blank" rel="external"><strong><code>flatMap( )</code>, <code>switchMap( )</code>,<code>concatMap( )</code>, and <code>flatMapIterable( )</code></strong></a> — 将Observable发射的数据集合变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"Java"</span>, <span class="string">"RxJava"</span>, <span class="string">"Kotlin"</span>)</div><div class="line">      .flatMap(s -&gt; Observable.just(<span class="string">"Hello "</span> + s))</div><div class="line">      .subscribe(System.out::println);</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Hello Java</div><div class="line">Hello RxJava</div><div class="line">Hello Kotlin</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Scan.html" target="_blank" rel="external"><strong><code>scan( )</code></strong></a> — 对Observable发射的每一项数据应用一个函数，然后按顺序依次发射每一个值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">      .scan((sum, item) -&gt; sum + item)</div><div class="line">      .subscribe(System.out::println);</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">3</div><div class="line">6</div><div class="line">10</div><div class="line">15</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/GroupBy.html" target="_blank" rel="external"><strong><code>groupBy( )</code></strong></a> — 将Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">        .groupBy(item -&gt; &#123;</div><div class="line">          <span class="keyword">if</span> (item % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"偶数"</span>;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"奇数"</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;).subscribe(stringIntegerGroupedObservable -&gt; stringIntegerGroupedObservable.subscribe(</div><div class="line">        value -&gt; &#123;</div><div class="line">          System.out.println(stringIntegerGroupedObservable.getKey() + value);</div><div class="line">        &#125;));</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">奇数1</div><div class="line">偶数2</div><div class="line">奇数3</div><div class="line">偶数4</div><div class="line">奇数5</div><div class="line">偶数6</div><div class="line">奇数7</div><div class="line">偶数8</div><div class="line">奇数9</div><div class="line">偶数10</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Buffer.html" target="_blank" rel="external"><strong><code>buffer( )</code></strong></a> — 它定期从Observable收集数据到一个集合，然后把这些数据集合打包发射，而不是一次发射一个</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">      .buffer(<span class="number">2</span>)</div><div class="line">      .subscribe(System.out::println);</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[1, 2]</div><div class="line">[3, 4]</div><div class="line">[5, 6]</div><div class="line">[7, 8]</div><div class="line">[9, 10]</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Window.html" target="_blank" rel="external"><strong><code>window( )</code></strong></a> — 定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">1</span>, <span class="number">5</span>)</div><div class="line">   .window(<span class="number">2</span>)</div><div class="line">   .subscribe(integerObservable -&gt; integerObservable.subscribe(System.out::println));</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Map.html" target="_blank" rel="external"><strong><code>cast( )</code></strong></a> — 在发射之前强制将Observable发射的所有数据转换为指定类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line">  <span class="keyword">private</span> String stuNo;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setStuNo</span><span class="params">(String stuNo)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.stuNo = stuNo;</div><div class="line">    &#125;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> name + <span class="string">":"</span> + stuNo;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">List&lt;Student&gt; studentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">  Student student = <span class="keyword">new</span> Student();</div><div class="line">  student.setName(<span class="string">"name"</span> + i);</div><div class="line">  student.setStuNo(<span class="string">"stuNo"</span> + i);</div><div class="line">  studentList.add(student);</div><div class="line">&#125;</div><div class="line">Observable.from(studentList)</div><div class="line">    .cast(Student.class)</div><div class="line">    .subscribe(System.out::println);</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name0:stuNo0</div><div class="line">name1:stuNo1</div><div class="line">name2:stuNo2</div></pre></td></tr></table></figure>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>本文参考</p>
<blockquote>
<p>Rx和RxJava文档中文翻译项目 <a href="https://mcxiaoke.gitbooks.io/rxdocs/content/" target="_blank" rel="external">https://mcxiaoke.gitbooks.io/rxdocs/content/</a></p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;变换操作&quot;&gt;&lt;a href=&quot;#变换操作&quot; class=&quot;headerlink&quot; title=&quot;变换操作&quot;&gt;&lt;/a&gt;变换操作&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Map, flatMap, scan, groupBy, buffer, window, cast
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rxjava学习笔记之创建操作符</title>
    <link href="https://abelsdf.github.io/2017/07/19/Rxjava%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://abelsdf.github.io/2017/07/19/Rxjava学习笔记之创建操作符/</id>
    <published>2017-07-19T10:02:02.810Z</published>
    <updated>2017-07-19T12:54:27.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h1><blockquote>
<p>Create, Defer, Empty/Never/Throw, From, Interval, Just, Range, Repeat, Start, Timer</p>
</blockquote>
<ul>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Just.html" target="_blank" rel="external"><strong><code>just( )</code></strong></a> — 将一个或多个对象转换成发射这个或这些对象的一个Observable</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">      .subscribe(System.out::println,</div><div class="line">          throwable -&gt; System.out.println(<span class="string">"Error encountered:"</span> + throwable.getMessage()),</div><div class="line">          () -&gt; System.out.println(<span class="string">"Sequence complete."</span>));</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/From.html" target="_blank" rel="external"><strong><code>from( )</code></strong></a> — 将一个Iterable, 一个Future, 或者一个数组转换成一个Observable</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Integer[] integers = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line">Observable.from(integers)</div><div class="line">    .subscribe(System.out::println,</div><div class="line">        throwable -&gt; System.out.println(<span class="string">"Error encountered: "</span> + throwable.getMessage()),</div><div class="line">        () -&gt; System.out.println(<span class="string">"Sequence complete"</span>));</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">Sequence complete</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Range.html" target="_blank" rel="external"><strong><code>range( )</code></strong></a> — 创建一个发射指定范围的整数序列的Observable</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">1</span>, <span class="number">3</span>)</div><div class="line">    .subscribe(System.out::println,</div><div class="line">        throwable -&gt; System.out.println(<span class="string">"Error encountered:"</span> + throwable.getMessage()),</div><div class="line">        () -&gt; System.out.println(<span class="string">"Sequence complete."</span>));</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">Sequence complete</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Repeat.html" target="_blank" rel="external"><strong><code>repeat( )</code></strong></a> — 创建一个重复发射指定数据或数据序列的Observable</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">1</span>, <span class="number">3</span>)</div><div class="line">      .repeat(<span class="number">2</span>)</div><div class="line">      .subscribe(System.out::println,</div><div class="line">          throwable -&gt; System.out.println(<span class="string">"Error encountered:"</span> + throwable.getMessage()),</div><div class="line">          () -&gt; System.out.println(<span class="string">"Sequence complete."</span>));</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">Sequence complete</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Repeat.html" target="_blank" rel="external"><strong><code>repeatWhen( )</code></strong></a> — 创建一个重复发射指定数据或数据序列的Observable，它依赖于另一个Observable发射的数据</p>
</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Create.html" target="_blank" rel="external"><strong><code>create( )</code></strong></a> — 使用一个函数从头创建一个Observable</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  Observable.create((OnSubscribe&lt;Integer&gt;) observer -&gt; &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">if</span> (!observer.isUnsubscribed()) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">          observer.onNext(i);</div><div class="line">        &#125;</div><div class="line">        observer.onCompleted();</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      observer.onError(e);</div><div class="line">    &#125;</div><div class="line">  &#125;).subscribe(System.out::println,</div><div class="line">      throwable -&gt; System.out.println(<span class="string">"Error encountered:"</span> + throwable.getMessage()),</div><div class="line">      () -&gt; System.out.println(<span class="string">"Sequence complete."</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Defer.html" target="_blank" rel="external"><strong><code>defer( )</code></strong></a> — 只有当订阅者订阅才创建Observable；为每个订阅创建一个新的Observable</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Defer</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String value;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.value = value;</div><div class="line">  &#125;</div><div class="line">  <span class="function">Observable&lt;String&gt; <span class="title">valueObservable</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> Observable.defer(<span class="keyword">new</span> Func0&lt;Observable&lt;String&gt;&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> Observable.just(value);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Defer defer = <span class="keyword">new</span> Defer();</div><div class="line">Observable&lt;String&gt; deferObservable = defer.valueObservable();</div><div class="line">defer.setValue(<span class="string">"你好"</span>);</div><div class="line">deferObservable.subscribe(System.out::println,</div><div class="line">     throwable -&gt; System.out.println(<span class="string">"Error encountered:"</span> + throwable.getMessage()),</div><div class="line">     () -&gt; System.out.println(<span class="string">"Sequence complete."</span>));</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">Sequence complete.</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Interval.html" target="_blank" rel="external"><strong><code>interval( )</code></strong></a> — 创建一个按照给定的时间间隔发射整数序列的Observable</p>
</li>
<li><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Timer.html" target="_blank" rel="external"><strong><code>timer( )</code></strong></a> — 创建一个在给定的延时之后发射单个数据的Observable</li>
<li><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Empty.html" target="_blank" rel="external"><strong><code>empty( )</code></strong></a> — 创建一个什么都不做直接通知完成的Observable</li>
<li><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Empty.html" target="_blank" rel="external"><strong><code>error( )</code></strong></a> — 创建一个什么都不做直接通知错误的Observable</li>
<li><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Empty.html" target="_blank" rel="external"><strong><code>never( )</code></strong></a> — 创建一个不发射任何数据的Observable</p>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>本文参考</p>
<blockquote>
<p>Rx和RxJava文档中文翻译项目 <a href="https://mcxiaoke.gitbooks.io/rxdocs/content/" target="_blank" rel="external">https://mcxiaoke.gitbooks.io/rxdocs/content/</a></p>
<p>使用RxJava实现延迟订阅 <a href="http://www.jianshu.com/p/c83996149f5b" target="_blank" rel="external">http://www.jianshu.com/p/c83996149f5b</a></p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建操作&quot;&gt;&lt;a href=&quot;#创建操作&quot; class=&quot;headerlink&quot; title=&quot;创建操作&quot;&gt;&lt;/a&gt;创建操作&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Create, Defer, Empty/Never/Throw, From, Interval,
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用RxJava+Retrofit+Kotlin打造新闻APP</title>
    <link href="https://abelsdf.github.io/2017/07/15/%E6%96%B0%E9%97%BBAPP/"/>
    <id>https://abelsdf.github.io/2017/07/15/新闻APP/</id>
    <published>2017-07-15T12:19:30.345Z</published>
    <updated>2017-07-15T14:35:17.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从 Kotlin 被 google 选中为 Android 官方编程语言之一，业内的关注度就一直在上升。笔者也是第一次使用Kotlin写一个完整的程序，边做边学习。</p>
<h2 id="Rxjava"><a href="#Rxjava" class="headerlink" title="Rxjava"></a>Rxjava</h2><p>RxJava是Reactive Extensions的Java VM实现：用于通过使用observable序列来组合异步和基于事件的程序的库。</p>
<blockquote>
<p>github地址 <a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">https://github.com/ReactiveX/RxJava</a></p>
</blockquote>
<h2 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h2><p>Retrofit是Square公司开源的一个高质量高效率的http库，它将我们自己开发的底层的代码和细节都封装了起来,使用它可以简化我们网络操作的工作，提高效率和正确率.</p>
<ul>
<li><p>Retrofit将HTTP API转换为Java接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitHubService</span> </span>&#123;</div><div class="line">  <span class="meta">@GET</span>(<span class="string">"users/&#123;user&#125;/repos"</span>)</div><div class="line">  Call&lt;List&lt;Repo&gt;&gt; listRepos(<span class="meta">@Path</span>(<span class="string">"user"</span>) String user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Retrofit类生成一个GitHubService接口的实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">  .baseUrl(<span class="string">"https://api.github.com/"</span>)</div><div class="line">  .build();</div><div class="line"></div><div class="line">GitHubService service = retrofit.create(GitHubService.class);</div></pre></td></tr></table></figure>
</li>
<li><p>Call创建的每个都GitHubService可以向远程Web服务器发送同步或异步HTTP请求。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Call&lt;List&lt;Repo&gt;&gt; repos = service.listRepos(<span class="string">"octocat"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h2><p> Kotlin 被 google 选中为 Android 官方编程语言之一,kotlin 与 java百分百兼容。java能做到的kotlin也能做到，而且kotlin还具有很多优秀的高级语言特效</p>
<ul>
<li><p>使用一行代码创建一个包含 getters、 setters、 equals()、 hashCode()、 toString() 以及 copy() 的 POJO：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">data class <span class="title">Customer</span><span class="params">(val name: String, val email: String, val company: String)</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>或者使用 lambda 表达式来过滤列表：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val positiveNumbers = list.filter &#123; it &gt; <span class="number">0</span> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>想要单例？创建一个 object 就可以了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">object ThisIsASingleton &#123;</div><div class="line">  val companyName: String = <span class="string">"JetBrains"</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="本项目使用的依赖"><a href="#本项目使用的依赖" class="headerlink" title="本项目使用的依赖"></a>本项目使用的依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">implementation <span class="string">"org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"</span></div><div class="line">compile <span class="string">"org.jetbrains.anko:anko-commons:$anko_version"</span></div><div class="line">implementation <span class="string">'com.android.support.constraint:constraint-layout:1.0.2'</span></div><div class="line">implementation <span class="string">'com.android.support:recyclerview-v7:26.0.0-beta2'</span></div><div class="line">implementation <span class="string">'com.android.support:design:26.0.0-beta2'</span></div><div class="line">implementation <span class="string">'com.android.support:appcompat-v7:26.0.0-beta2'</span></div><div class="line">implementation <span class="string">'com.google.code.gson:gson:2.8.1'</span></div><div class="line"><span class="comment">//Gson 解析json</span></div><div class="line">implementation <span class="string">'com.squareup.retrofit2:converter-gson:2.3.0'</span></div><div class="line">implementation <span class="string">'com.squareup.retrofit2:adapter-rxjava:2.3.0'</span></div><div class="line">implementation <span class="string">'io.reactivex.rxjava2:rxjava:2.1.1'</span></div><div class="line">implementation <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.1'</span></div><div class="line"><span class="comment">//图片加载</span></div><div class="line">implementation <span class="string">'com.github.bumptech.glide:glide:4.0.0-RC1'</span></div><div class="line">annotationProcessor <span class="string">'com.github.bumptech.glide:compiler:4.0.0-RC1'</span></div><div class="line"><span class="comment">//SmartRefreshLayout</span></div><div class="line">compile <span class="string">'com.scwang.smartrefresh:SmartRefreshLayout:1.0.1'</span></div><div class="line">implementation <span class="string">'com.squareup.retrofit2:adapter-rxjava2:2.3.0'</span></div><div class="line"><span class="comment">//Gif</span></div><div class="line">compile <span class="string">'pl.droidsonroids.gif:android-gif-drawable:1.2.3'</span></div></pre></td></tr></table></figure>
<h2 id="首页布局"><a href="#首页布局" class="headerlink" title="首页布局"></a>首页布局</h2><p>activity_main.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/drawerLayout"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.abels.android.news.MainActivity"</span></div><div class="line">    <span class="attr">tools:openDrawer</span>=<span class="string">"start"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">        <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/main_content"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/appbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</div><div class="line">            <span class="comment">&lt;!--android:layout_height="?attr/actionBarSize"--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"30dp"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">                <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll"</span></div><div class="line">                <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span>/&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/tabs"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/viewpager"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:padding</span>=<span class="string">"10dp"</span></div><div class="line">            <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/navView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header_main"</span></div><div class="line">        <span class="attr">app:menu</span>=<span class="string">"@menu/activity_main_drawer"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>fragment_news.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">com.scwang.smartrefresh.layout.SmartRefreshLayout</span></span></div><div class="line">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">  <span class="attr">android:id</span>=<span class="string">"@+id/refreshLayout"</span></div><div class="line">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">pl.droidsonroids.gif.GifImageView</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"130dp"</span></div><div class="line">      <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">      <span class="attr">android:src</span>=<span class="string">"@drawable/refresh"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">      <span class="attr">android:id</span>=<span class="string">"@+id/recycleview"</span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:background</span>=<span class="string">"#fff"</span></div><div class="line">      <span class="attr">android:overScrollMode</span>=<span class="string">"never"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">com.scwang.smartrefresh.layout.SmartRefreshLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>API<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ApiService</span> </span>&#123;</div><div class="line">  <span class="comment">//社会新闻</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * type 新闻类型</div><div class="line">     * key 申请的API KEY</div><div class="line">     * num 指定返回数量，最大50</div><div class="line">     * page 翻页，每页输出数量跟随num参数</div><div class="line">     */</div><div class="line">    <span class="meta">@GET</span>(<span class="string">"&#123;type&#125;/"</span>)</div><div class="line">    <span class="function">fun <span class="title">getNewsData</span><span class="params">(@Path(<span class="string">"type"</span>)</span> type: String,</span></div><div class="line">                    @<span class="title">Query</span><span class="params">(<span class="string">"key"</span>)</span> key: String,</div><div class="line">                    @<span class="title">Query</span><span class="params">(<span class="string">"num"</span>)</span> num: String,</div><div class="line">                    @<span class="title">Query</span><span class="params">(<span class="string">"page"</span>)</span> page: Int): Observable&lt;News&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//单例模式</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiUtils</span> <span class="title">private</span> <span class="title">constructor</span>() </span>&#123;</div><div class="line">    <span class="keyword">private</span> var sRetrofit: Retrofit? = <span class="keyword">null</span></div><div class="line">    <span class="comment">//初始化</span></div><div class="line">    init &#123;</div><div class="line">        sRetrofit = Retrofit.Builder()</div><div class="line">                .addConverterFactory(GsonConverterFactory.create())</div><div class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</div><div class="line">                .baseUrl(BASE_URL)</div><div class="line">                .build()</div><div class="line">    &#125;</div><div class="line">    companion object &#123;</div><div class="line"></div><div class="line">        <span class="function">fun <span class="title">getInstance</span><span class="params">()</span>: ApiUtils </span>&#123;</div><div class="line">            <span class="keyword">return</span> Inner.instance</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> object Inner &#123;</div><div class="line">        val instance = ApiUtils()</div><div class="line">    &#125;</div><div class="line">    fun &lt;T&gt; create(service: Class&lt;T&gt;): T &#123;</div><div class="line">        <span class="keyword">return</span> sRetrofit!!.create(service)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接口调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">fun getData(num: String, type: String) &#123;</div><div class="line">  val retrofit = ApiUtils.getInstance().create(ApiService::class.java)</div><div class="line">  retrofit.getNewsData(mType.getTypeUrl(), APIKEY, num, page)</div><div class="line">          .subscribeOn(Schedulers.io())</div><div class="line">          .observeOn(AndroidSchedulers.mainThread())</div><div class="line">          .subscribe(object : Observer&lt;News&gt; &#123;</div><div class="line">              override fun onComplete() &#123;</div><div class="line">                  Log.d(&quot;onComplete&quot;, &quot;onComplete&quot;)</div><div class="line">              &#125;</div><div class="line">              override fun onNext(t: News) &#123;</div><div class="line">                  if (t.code == 200) &#123;</div><div class="line">                      page++</div><div class="line">                      for (i in 0..t.newslist!!.size - 1) &#123;</div><div class="line">                          if (type.equals(&quot;refresh&quot;)) &#123;</div><div class="line">                              mNewsListBeans!!.add(0, t.newslist!![i])</div><div class="line">                          &#125; else &#123;</div><div class="line">                              mNewsListBeans!!.add(mNewsListBeans.size, t.newslist!![i])</div><div class="line">                          &#125;</div><div class="line">                      &#125;</div><div class="line"></div><div class="line">                  &#125; else &#123;</div><div class="line">                      context.toast(&quot;无最新数据！&quot;)</div><div class="line">                  &#125;</div><div class="line">                  if (mRefreshLayout!!.isRefreshing) &#123;</div><div class="line">                      mRefreshLayout!!.finishRefresh(1000)</div><div class="line">                  &#125;</div><div class="line">                  if (mRefreshLayout!!.isLoading) &#123;</div><div class="line">                      mRefreshLayout!!.finishLoadmore()</div><div class="line">                  &#125;</div><div class="line">                  mRefreshLayout!!.setOnMultiPurposeListener(object : OnMultiPurposeListener &#123;</div><div class="line">                      override fun onFooterPulling(footer: RefreshFooter?, percent: Float, offset: Int, footerHeight: Int, extendHeight: Int) &#123;&#125;</div><div class="line">                      override fun onLoadmore(refreshlayout: RefreshLayout?) &#123;&#125;</div><div class="line">                      override fun onHeaderReleasing(header: RefreshHeader?, percent: Float, offset: Int, headerHeight: Int, extendHeight: Int) &#123;&#125;</div><div class="line">                      override fun onHeaderStartAnimator(header: RefreshHeader?, headerHeight: Int, extendHeight: Int) &#123;&#125;</div><div class="line">                      override fun onStateChanged(refreshLayout: RefreshLayout?, oldState: RefreshState?, newState: RefreshState?) &#123;</div><div class="line">                          mNewAdapter!!.notifyDataSetChanged()</div><div class="line">                      &#125;</div><div class="line">                      override fun onFooterFinish(footer: RefreshFooter?) &#123;</div><div class="line">                          mNewAdapter!!.notifyDataSetChanged()</div><div class="line">                      &#125;</div><div class="line">                      override fun onFooterStartAnimator(footer: RefreshFooter?, footerHeight: Int, extendHeight: Int) &#123;&#125;</div><div class="line">                      override fun onFooterReleasing(footer: RefreshFooter?, percent: Float, offset: Int, footerHeight: Int, extendHeight: Int) &#123;&#125;</div><div class="line">                      override fun onHeaderPulling(header: RefreshHeader?, percent: Float, offset: Int, headerHeight: Int, extendHeight: Int) &#123;&#125;</div><div class="line">                      override fun onRefresh(refreshlayout: RefreshLayout?) &#123;&#125;</div><div class="line">                      override fun onHeaderFinish(header: RefreshHeader?) &#123;&#125;</div><div class="line">                  &#125;)</div><div class="line">                  //mNewAdapter!!.notifyDataSetChanged()</div><div class="line">              &#125;</div><div class="line">              override fun onSubscribe(d: Disposable) &#123;</div><div class="line">                  Log.d(&quot;Disposable&quot;, &quot;Disposable&quot;)</div><div class="line">              &#125;</div><div class="line">              override fun onError(e: Throwable) &#123;</div><div class="line">                  context.toast(&quot;请求新闻失败!&quot;)</div><div class="line">              &#125;</div><div class="line">          &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="数据绑定到RecycleView-上"><a href="#数据绑定到RecycleView-上" class="headerlink" title="数据绑定到RecycleView 上"></a>数据绑定到RecycleView 上</h2><p>NewsAdapter 继承RecyclerView.Adapter<newsadapter.newsholder><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">class NewsAdapter(var mContext: Context, var mNewListBeans: MutableList&lt;NewslistBean&gt;?) : RecyclerView.Adapter&lt;NewsAdapter.NewsHolder&gt;() &#123;</div><div class="line">  override fun getItemCount(): Int &#123;</div><div class="line">      if (mNewListBeans == null) &#123;</div><div class="line">          return 0</div><div class="line">      &#125; else &#123;</div><div class="line">          return mNewListBeans!!.size</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  override fun onBindViewHolder(holder: NewsHolder?, position: Int) &#123;</div><div class="line">      holder!!.itemView.tvName.text = mNewListBeans!![position].title</div><div class="line">      holder!!.itemView.tvSign.text = mNewListBeans!![position].ctime</div><div class="line">      if (mNewListBeans!![position].picUrl != null &amp;&amp; !mNewListBeans!![position].picUrl.equals("")) &#123;</div><div class="line">          holder!!.itemView.ivPic.visibility = View.VISIBLE</div><div class="line">          Glide.with(mContext)</div><div class="line">                  .load(mNewListBeans!![position].picUrl)</div><div class="line">                  .into(holder!!.itemView.ivPic)</div><div class="line">      &#125; else &#123;</div><div class="line">          holder!!.itemView.ivPic.visibility = View.GONE</div><div class="line">      &#125;</div><div class="line">      holder!!.itemView.setOnClickListener &#123;</div><div class="line">          var intent = Intent(mContext, NewsDetailActivity::class.java)</div><div class="line">          intent.putExtra("pic", mNewListBeans!![position].picUrl)</div><div class="line">          intent.putExtra("url", mNewListBeans!![position].url)</div><div class="line">          mContext.startActivity(intent)</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  override fun onCreateViewHolder(parent: ViewGroup?, viewType: Int): NewsHolder &#123;</div><div class="line">      var view = LayoutInflater.from(mContext).inflate(R.layout.news_item, parent, false)</div><div class="line"></div><div class="line">      return NewsHolder(view)</div><div class="line">  &#125;</div><div class="line">  class NewsHolder(itemView: View?) : RecyclerView.ViewHolder(itemView)</div><div class="line">&#125;</div></pre></td></tr></table></figure></newsadapter.newsholder></p>
<p>RecyclerView配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mNewAdapter = NewsAdapter(context, mNewsListBeans)</div><div class="line">recycleView.layoutManager = LinearLayoutManager(context)</div><div class="line">recycleView.adapter = <span class="function">mNewAdapter</span></div><div class="line"></div><div class="line"><span class="title">if</span> <span class="params">(mNewsListBeans.size == <span class="number">0</span>)</span> &#123;</div><div class="line">  mRefreshLayout!!.autoRefresh()</div><div class="line">&#125;</div><div class="line">mRefreshLayout!!.setOnRefreshListener &#123;</div><div class="line">  getData(<span class="string">"10"</span>, <span class="string">"refresh"</span>)</div><div class="line">&#125;</div><div class="line">mRefreshLayout!!.setOnLoadmoreListener &#123;</div><div class="line">  getData(<span class="string">"10"</span>, <span class="string">"load"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  第一次写博客，贴了好多代码，而且还有好多代码没贴上去，果然语文不好。总的来说这只是一个很简单的APP，虽然中间遇到了一些坑，也只能当做是来练手了。下次再写博客争取多文字少代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;自从 Kotlin 被 google 选中为 Android 官方编程语言之一，业内的关注度就一直在上升。笔者也是第一次使用Kotlin写一
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你好</title>
    <link href="https://abelsdf.github.io/2017/07/13/hello-world/"/>
    <id>https://abelsdf.github.io/2017/07/13/hello-world/</id>
    <published>2017-07-13T10:18:03.940Z</published>
    <updated>2017-07-13T13:34:14.887Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到单黛丰的个人博客.<br><br>本博客用于自身学习笔记.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎来到单黛丰的个人博客.&lt;br&gt;&lt;br&gt;本博客用于自身学习笔记.&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
